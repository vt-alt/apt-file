#!/bin/bash

shopt -s extglob
shopt -s nullglob

usage() {
  [ "$1" ] && echo "Unknown option $1"
  echo "Usage: apt-file [command] pattern [options]"
  echo
  echo "Options:"
  echo
  echo "  --arch|-a <arch>         only search this architecture"
  echo "  --noarch|--x86_64|--i586 shortcuts for above"
  echo "  --package-only|-l        show package names only"
  echo "  --show=arch|-A           show architecture column"
  echo "  --pkglist|--local|-q     search local pkglist database (limited functionality)"
  echo "  --repo|-r <p8...>        search in particular branch repo (default is your repo)"
  echo "  --p8|--c8|--Sisyphus     shortcuts for above"
  echo "  --fixed-string|-F        full string match (default in list/show mode)"
  echo "  --substring-match        substring match (default in search/find mode)"
  echo "  --regexp|-x              regular expression match (default in modeless)"
  echo "  --file                   search in file names only (default in find mode)"
  echo "  --package                search in package names only (default in list mode)"
  echo "  --ignore-case|-i         ignore case in search"
  echo
  echo "Commands:"
  echo
  echo "    update                 update index (default is to auto-update one per week)"
  echo "    clean                  delete downloaded indices from ~/.cache/apt-file/"
  echo "    search|find <pattern>  search pattern in files (default is --substring-match)"
  echo "    list|show <pattern>    list files in package (default is --fixed-string mode)"
  echo "                           you may change above to regexp matching with -x option"
  echo "    <pattern>              modeless search regexp in both package names and files"
  exit
}

cache=~/.cache/apt-file

clean() {
  rm -v -rf $cache
  exit
}

declare -a arch=($HOSTTYPE noarch)
repo=Sisyphus
declare pkglist= pattern= package= verbose= case=
declare update=auto search= show= fromfile=
declare -a args

while [ $# -gt 0 ]; do
  declare opt="$1" arg="$2" ac=1
  case "$opt" in
    --*=*) arg="${opt#*=}"; ac=0 ;;
  esac
  case "$opt" in
    --arch*|-a) arch=(${arg//,/ }); shift $ac ;;
    --noarch|--x86_64|--i586|--aarch64|--armh) arch=("${opt#--}") ;;
    --repo|-r) repo=$arg; shift $ac ;;
    --sisyphus|--[cpst][0-9]*|--[2-5].[0-4]) repo=("${opt#--}") ;;
    --fixed-string|-F) pattern=fixedstring ;;
    --substring-match) pattern=substring ;;
    --regexp|-x) pattern=regexp ;;
    --file) search=file ;;
    --package) search=package ;;
    --config-file|-c) APT_CONFIG=$arg ;;
    --ignore-case|-i) case=-i ;;
    --from-file|-f) fromfile=true ;;
    --show=arch|-A) show=arch ;;
    --pkglist|--local|-q) pkglist=query ;;
    --package-only|-l) package=only ;;
    --verbose|-v) verbose=true ;;
    --filter-suites) suite=$arg; shift $ac ;;
    --help|-h) usage ;;
    *) args+=("$opt") ;;
  esac
  shift
done
set -- "${args[@]}"

ac=1
if [[ "$1" =~ ^up(d(a(te?)?)?)?$ ]]; then update=verbose; shift; fi
if [[ "$1" =~ ^s(e(a(r(ch?)?)?)?)?$ || "$1" =~ ^f(i(nd?)?)?$ ]]; then
  search=file
  pattern=${pattern:-substring}
elif [[ "$1" =~ ^l(i(st?)?)?$ || "$1" =~ ^s(h(ow?)?)?$ ]]; then
  search=package
  pattern=${pattern:-fixedstring}
elif [[ "$1" =~ ^c(l(e(an?)?)?)?$ ]]; then
  clean
elif [[ "$1" =~ ^h(e(lp?)?)?$ ]]; then
  usage
else
  ac=0
fi
shift $ac

# determine system repo
if [ -z "$repo" ]; then
  # determine repo
  r=$(sed 's/#.*//;s/\[.*\]//' /etc/apt/sources.list /etc/apt/sources.list.d/*.list \
    | grep ... \
    | awk '{print$2"/"$3}')
  if [[ "$r" =~ ([^/]+)/branch ]]; then
    repo=${BASH_REMATCH[1]}
  fi
fi
if [ "$repo" != Sisyphus ]; then
  rpath=$repo/branch
else
  rpath=$repo
fi

if [[ -z "$*" && "$update" != verbose ]]; then
  usage
fi

search_index() {
  local sharch=
  local e="$*"

  if [ "$pattern" != regexp ]; then
    e="${e//\\/\\\\}"
    e="${e//./\.}"
    e="${e//\*/\*}"
  fi
  if [ "$pattern" = fixedstring ]; then
    m="$e"
  else
    m=".*$e.*"
  fi
  if [ "$search" = package ]; then
    m=$'\t'"$m$"
  elif [ "$search" = file ]; then
    m="^$m"$'\t'
  else
    # not anchored pattern does not need wildcards
    m="$e"
  fi
  if [ "$fromfile" ]; then
    matcher=(--file="$*")
    selector=(--file="$*")
  else
    matcher=(-e "$m")
    selector=(-e "$e")
    if [ "$verbose" ]; then printf 'Match pattern: %q\n' "$m" >&2; fi
  fi
  for a in ${arch[@]}; do
    if [ "$show" = arch ]; then
      sharch="\"$a: \""
    fi
    idx=$cache/$repo.$a
    if [ "$pkglist" ]; then
      find /var/lib/apt -type f -name '*_'${a/_/%5f}'_base_pkglist.classic' | while read pl; do
	if [ "$verbose" ]; then printf 'Query: %q\n' "$pl" >&2; fi
	pkglist-query '[%{FILENAMES}\t%{NAME}\n]' $pl
      done
    else
      if [ "$verbose" ]; then printf 'Grep: %q\n' "$idx" >&2; fi
      cat $idx
    fi \
    | grep $case "${matcher[@]}" \
    | if [ "$package" = only ]; then
	awk -F '\t' "{print$sharch\$2}" | sort -u
      else
	awk -F '\t' "{print$sharch\$2\": \"\$1}"
    fi
  done \
  | sort \
  | grep --color $case "${selector[@]}" -e '$'
}

update_index() {
  local a=$1

  if [ "$update" = verbose ]; then
    ropt=--info=progress2
  else
    if [[ -e $cache/$repo.$a && -n "$(find $cache/$repo.$a -type f -ctime -7)" ]]; then return; fi
    if tty --silent < /dev/stdout; then
      update=auto
      ropt=--info=progress2
    else
      ropt=-q
    fi
  fi
  set -e # for ^C
  of=$cache/$repo.$a
  [ "$update" = verbose ] && echo -n Updating $repo/$a...
  url=rsync.altlinux.ru::ALTLinux/$rpath/$a/base/contents_index
  if [ -n "$(rsync --no-motd --dry-run --out-format=%n $url $of 2>/dev/null)" ]; then
    [ "$update" = verbose ] && echo
    [ "$update" = auto ] && echo Updating $repo/$a...
    (umask 022; rsync -a -z --no-motd $ropt $url $of)
    [ "$update" = auto ] && echo -ne '\e[2A\e[J' # up,up,clear to the end of screen
  else
    [ "$update" = verbose ] && echo " is up to date."
  fi
  chmod 644 $of # touch ctime
  set +e
}

update_indices() {
  if [ ! -d $cache ]; then
    mkdir -p $cache
  fi
  for a in ${arch[@]}; do
    update_index $a
  done
}

if [ $update ]; then
  update_indices
fi

if [ "$*" ]; then
  search_index "$@"
fi
